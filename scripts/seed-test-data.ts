import { db } from '@/lib/db';
import { user as appUser, users as credentials, chat, message, event } from '@/lib/db/schema';
import { v4 as uuidv4 } from 'uuid';
import { generateId } from 'ai';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

// ============================================================================
// Helpers pour g√©n√©rer des donn√©es al√©atoires
// ============================================================================

function randomBetween(min: number, max: number): number {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function randomElement<T>(arr: T[]): T {
  return arr[Math.floor(Math.random() * arr.length)];
}

function randomDate(daysAgo: number, hoursAgo?: number): Date {
  const now = new Date();
  const minMs = hoursAgo ? hoursAgo * 60 * 60 * 1000 : 0;
  const maxMs = daysAgo * 24 * 60 * 60 * 1000;
  const randomMs = Math.random() * (maxMs - minMs) + minMs;
  return new Date(now.getTime() - randomMs);
}

function randomIP(): string {
  return `${randomBetween(1, 255)}.${randomBetween(0, 255)}.${randomBetween(0, 255)}.${randomBetween(1, 255)}`;
}

function randomGeo() {
  const cities = [
    { city: 'Paris', country: 'France', lat: 48.8566, lon: 2.3522 },
    { city: 'London', country: 'United Kingdom', lat: 51.5074, lon: -0.1278 },
    { city: 'New York', country: 'United States', lat: 40.7128, lon: -74.006 },
    { city: 'Tokyo', country: 'Japan', lat: 35.6762, lon: 139.6503 },
    { city: 'Berlin', country: 'Germany', lat: 52.52, lon: 13.405 },
    { city: 'Sydney', country: 'Australia', lat: -33.8688, lon: 151.2093 },
    { city: 'Toronto', country: 'Canada', lat: 43.6532, lon: -79.3832 },
    { city: 'Dubai', country: 'UAE', lat: 25.2048, lon: 55.2708 },
  ];
  return randomElement(cities);
}

// ============================================================================
// G√©n√©ration des utilisateurs de test
// ============================================================================

async function seedTestUsers() {
  console.log('\nüë• Cr√©ation des utilisateurs de test...\n');

  const testUsers = [
    { username: 'alice', role: 'user' as const, status: 'active' as const },
    { username: 'bob', role: 'admin' as const, status: 'active' as const },
    { username: 'charlie', role: 'user' as const, status: 'active' as const },
    { username: 'diana', role: 'user' as const, status: 'active' as const },
    { username: 'eve', role: 'user' as const, status: 'suspended' as const },
    { username: 'frank', role: 'admin' as const, status: 'active' as const },
    { username: 'grace', role: 'user' as const, status: 'active' as const },
    { username: 'henry', role: 'user' as const, status: 'deleted' as const },
  ];

  const createdUserIds: string[] = [];

  for (const testUser of testUsers) {
    try {
      const userId = `local:${testUser.username}`;
      const email = `${testUser.username}@test.local`;
      const password = `${testUser.username}123`;
      const now = new Date();
      const createdAt = randomDate(60);
      const lastSeen = testUser.status === 'active' ? randomDate(7) : null;

      const mod = await import('bcryptjs');
      const bcrypt = (mod as any).default ?? (mod as any);
      const passwordHash = await bcrypt.hash(password, 10);

      // Cr√©er les credentials
      await db
        .insert(credentials)
        .values({ username: testUser.username, passwordHash })
        .onConflictDoNothing();

      // Cr√©er l'utilisateur
      await db
        .insert(appUser)
        .values({
          id: userId,
          name: testUser.username,
          email,
          emailVerified: Math.random() > 0.3,
          image: null,
          role: testUser.role,
          status: testUser.status,
          lastSeen,
          ipAddress: randomIP(),
          geo: randomGeo(),
          createdAt,
          updatedAt: now,
        })
        .onConflictDoNothing();

      createdUserIds.push(userId);
      console.log(
        `‚úÖ ${testUser.role === 'admin' ? 'üëë' : 'üë§'} ${testUser.username} (${testUser.role}) - Status: ${testUser.status}`
      );
    } catch (error) {
      console.error(`‚ùå Erreur pour ${testUser.username}:`, error);
    }
  }

  return createdUserIds;
}

// ============================================================================
// G√©n√©ration des chats
// ============================================================================

async function seedChats(userIds: string[]) {
  console.log('\nüí¨ Cr√©ation des conversations (chats)...\n');

  const chatTitles = [
    'Recherche IA avanc√©e',
    'Classification douani√®re',
    'Analyse de documents PDF',
    'Nomenclature tarifaire',
    'Questions sur les taxes',
    'Import/Export r√©glementations',
    'Calcul de droits de douane',
    'Conversion de devises',
    'Statistiques commerciales',
    'Certificats d\'origine',
    'Codes HS automatiques',
    'Correction de libell√©s',
    'Recherche produits',
    'Veille tarifaire',
    'Optimisation fiscale',
    'Accords commerciaux',
    'Conformit√© douani√®re',
    'Documentation import',
    'Valeur en douane',
    'Transit international',
    'R√©gimes douaniers',
    'Classement tarifaire',
    'Analyse r√©glementaire',
    'Support technique',
    'Formation utilisateurs',
  ];

  const createdChatIds: string[] = [];
  const activeUserIds = userIds.filter((id) => !id.includes('henry')); // Exclure deleted user

  for (let i = 0; i < 25; i++) {
    try {
      const chatId = uuidv4();
      const userId = randomElement(activeUserIds);
      const title = randomElement(chatTitles);
      const visibility = Math.random() > 0.2 ? 'private' : 'public';
      const createdAt = randomDate(30);
      const updatedAt = new Date(createdAt.getTime() + randomBetween(1000, 86400000));

      await db.insert(chat).values({
        id: chatId,
        userId,
        title,
        visibility: visibility as any,
        createdAt,
        updatedAt,
      });

      createdChatIds.push(chatId);
      console.log(`‚úÖ Chat "${title}" (${visibility}) - User: ${userId.split(':')[1]}`);
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation chat:', error);
    }
  }

  return createdChatIds;
}

// ============================================================================
// G√©n√©ration des messages
// ============================================================================

async function seedMessages(chatIds: string[]) {
  console.log('\nüì® Cr√©ation des messages...\n');

  const models = [
    { name: 'google-gemini-1.5-pro', weight: 40 },
    { name: 'google-gemini-2.0-flash', weight: 30 },
    { name: 'google-gemini-1.5-flash', weight: 20 },
    { name: 'gpt-4', weight: 5 },
    { name: 'claude-3-opus', weight: 5 },
  ];

  const userMessages = [
    "Quel est le code HS pour des chaussures en cuir ?",
    "Comment calculer les droits de douane sur l'√©lectronique ?",
    "Analyse ce document PDF pour moi",
    "Quelles sont les r√©glementations pour importer au Canada ?",
    "Convertis 1000 USD en EUR",
    "Donne-moi les statistiques d'import textile France",
    "Comment corriger ce libell√© commercial ?",
    "Quel certificat d'origine pour le Maroc ?",
    "Classification Cyrus pour v√©hicule automobile",
    "Recherche nomenclature douani√®re compl√®te",
  ];

  const assistantMessages = [
    "Le code HS pour des chaussures en cuir est g√©n√©ralement 6403. Il s'agit du chapitre 64 qui couvre les chaussures, et 6403 concerne sp√©cifiquement les chaussures avec dessus en cuir naturel.",
    "Pour calculer les droits de douane sur l'√©lectronique, il faut prendre en compte plusieurs √©l√©ments : la valeur CIF (co√ªt, assurance, fret), le taux de droits applicable selon le code HS, et les √©ventuelles taxes additionnelles.",
    "J'ai analys√© votre document PDF. Il contient 15 pages de donn√©es commerciales. Voici les informations cl√©s extraites...",
    "Pour importer au Canada, vous devez : 1) Obtenir un num√©ro d'entreprise de l'ARC, 2) D√©terminer le classement tarifaire, 3) Calculer les droits et taxes, 4) Pr√©parer les documents requis.",
    "Le taux de change actuel est : 1000 USD = 920.50 EUR (taux indicatif)",
    "Voici les statistiques d'importation textile pour la France sur les 12 derniers mois : volume total de 2.5 milliards EUR, principaux pays d'origine : Chine (45%), Bangladesh (18%), Turquie (12%).",
    "Le libell√© commercial a √©t√© corrig√© selon les standards douaniers. Voici la version optimis√©e pour la classification.",
    "Pour exporter vers le Maroc, vous aurez besoin d'un certificat d'origine EUR.1 si vous b√©n√©ficiez de l'accord d'association UE-Maroc.",
    "Classification Cyrus effectu√©e : Code SH 8703.23 - Voitures de tourisme avec moteur √† piston alternatif, cylindr√©e > 1500 cm¬≥ et ‚â§ 3000 cm¬≥",
    "Voici la nomenclature douani√®re compl√®te pour ce produit, avec tous les niveaux de classification du chapitre √† la sous-position.",
  ];

  let totalMessages = 0;
  const targetMessages = randomBetween(150, 200);

  // Distribuer les messages sur les 7 derniers jours, avec focus sur les derni√®res 24h
  while (totalMessages < targetMessages) {
    const chatId = randomElement(chatIds);

    // Cr√©er une paire user + assistant
    try {
      // Message user
      const userCreatedAt = randomDate(7, 2); // 7 jours, min 2 heures
      const userMessageId = generateId();

      await db.insert(message).values({
        id: userMessageId,
        chatId,
        role: 'user',
        parts: [{ type: 'text', text: randomElement(userMessages) }],
        attachments: [],
        createdAt: userCreatedAt,
        model: null,
        inputTokens: null,
        outputTokens: null,
        totalTokens: null,
        completionTime: null,
      });

      totalMessages++;

      // Message assistant (r√©ponse)
      const assistantCreatedAt = new Date(userCreatedAt.getTime() + randomBetween(1000, 5000));
      const assistantMessageId = generateId();

      // S√©lectionner un mod√®le selon les poids
      const rand = Math.random() * 100;
      let cumulative = 0;
      let selectedModel = models[0].name;
      for (const model of models) {
        cumulative += model.weight;
        if (rand <= cumulative) {
          selectedModel = model.name;
          break;
        }
      }

      const inputTokens = randomBetween(200, 2000);
      const outputTokens = randomBetween(100, 1500);
      const totalTokens = inputTokens + outputTokens;
      const completionTime = randomBetween(1000, 5000) / 1000; // 1-5 secondes

      await db.insert(message).values({
        id: assistantMessageId,
        chatId,
        role: 'assistant',
        parts: [{ type: 'text', text: randomElement(assistantMessages) }],
        attachments: [],
        createdAt: assistantCreatedAt,
        model: selectedModel,
        inputTokens,
        outputTokens,
        totalTokens,
        completionTime,
      });

      totalMessages++;

      if (totalMessages % 20 === 0) {
        console.log(`‚úÖ ${totalMessages}/${targetMessages} messages cr√©√©s...`);
      }
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation message:', error);
    }
  }

  console.log(`\n‚úÖ Total de ${totalMessages} messages cr√©√©s`);
  return totalMessages;
}

// ============================================================================
// G√©n√©ration des √©v√©nements syst√®me
// ============================================================================

async function seedEvents(userIds: string[]) {
  console.log('\nüîî Cr√©ation des √©v√©nements syst√®me...\n');

  const eventTemplates = [
    {
      category: 'security' as const,
      type: 'login',
      messageTemplate: (username: string, ip: string) => `User ${username} logged in from ${ip}`,
    },
    {
      category: 'security' as const,
      type: 'logout',
      messageTemplate: (username: string) => `User ${username} logged out`,
    },
    {
      category: 'security' as const,
      type: 'failed_login',
      messageTemplate: (username: string, ip: string) => `Failed login attempt for ${username} from ${ip}`,
    },
    {
      category: 'user' as const,
      type: 'user_created',
      messageTemplate: (username: string) => `New user account created: ${username}`,
    },
    {
      category: 'user' as const,
      type: 'user_updated',
      messageTemplate: (username: string) => `User ${username} updated their profile`,
    },
    {
      category: 'user' as const,
      type: 'user_suspended',
      messageTemplate: (username: string) => `User ${username} has been suspended`,
    },
    {
      category: 'user' as const,
      type: 'password_reset',
      messageTemplate: (username: string) => `Password reset requested by ${username}`,
    },
    {
      category: 'system' as const,
      type: 'database_backup',
      messageTemplate: () => 'Automated database backup completed',
    },
    {
      category: 'system' as const,
      type: 'api_error',
      messageTemplate: () => 'API rate limit exceeded',
    },
    {
      category: 'system' as const,
      type: 'maintenance',
      messageTemplate: () => 'System maintenance scheduled',
    },
  ];

  const totalEvents = randomBetween(30, 50);

  for (let i = 0; i < totalEvents; i++) {
    try {
      const eventId = generateId();
      const template = randomElement(eventTemplates);
      const userId = Math.random() > 0.3 ? randomElement(userIds) : null;
      const username = userId ? userId.split(':')[1] : 'system';
      const ip = randomIP();

      const eventMessage = template.messageTemplate(username, ip);
      const createdAt = randomDate(7);

      const metadata = {
        ip: template.category === 'security' ? ip : undefined,
        userAgent: template.category === 'security' ? 'Mozilla/5.0 (compatible)' : undefined,
        timestamp: createdAt.toISOString(),
        source: 'seed-script',
      };

      await db.insert(event).values({
        id: eventId,
        category: template.category,
        type: template.type,
        message: eventMessage,
        metadata,
        userId,
        createdAt,
      });

      console.log(`‚úÖ [${template.category}] ${template.type} - ${eventMessage.substring(0, 50)}...`);
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation √©v√©nement:', error);
    }
  }

  console.log(`\n‚úÖ Total de ${totalEvents} √©v√©nements cr√©√©s`);
  return totalEvents;
}

// ============================================================================
// Main
// ============================================================================

async function main() {
  console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('‚ïë   üé≤ G√©n√©ration de Donn√©es de Test - Scira Admin    ‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');

  console.log('\n‚ö†Ô∏è  Cette op√©ration va cr√©er des donn√©es de test dans la base.');
  console.log('   Les donn√©es existantes ne seront pas supprim√©es.\n');

  try {
    // 1. Cr√©er les utilisateurs de test
    const userIds = await seedTestUsers();

    // 2. Cr√©er les chats
    const chatIds = await seedChats(userIds);

    // 3. Cr√©er les messages
    const messageCount = await seedMessages(chatIds);

    // 4. Cr√©er les √©v√©nements
    const eventCount = await seedEvents(userIds);

    // Rapport final
    console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë                  üìä RAPPORT FINAL                    ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

    console.log(`‚úÖ Utilisateurs cr√©√©s : ${userIds.length}`);
    console.log(`‚úÖ Conversations cr√©√©es : ${chatIds.length}`);
    console.log(`‚úÖ Messages cr√©√©s : ${messageCount}`);
    console.log(`‚úÖ √âv√©nements cr√©√©s : ${eventCount}`);

    console.log('\nüìà Impact sur le Dashboard :');
    console.log('‚Ä¢ KPIs affichent des donn√©es r√©elles');
    console.log('‚Ä¢ Graphiques avec top 15 des mod√®les AI');
    console.log('‚Ä¢ Liste d\'utilisateurs remplie');
    console.log('‚Ä¢ Historique d\'√©v√©nements disponible');
    console.log('‚Ä¢ Statistiques d\'utilisation calculables');

    console.log('\nüí° Prochaines √©tapes :');
    console.log('1. D√©marrer l\'application : pnpm dev');
    console.log('2. Se connecter avec sam/sam');
    console.log('3. Acc√©der au dashboard : http://localhost:3000/admin');
    console.log('4. V√©rifier que tous les graphiques affichent des donn√©es');

    console.log('\n‚ú® G√©n√©ration de donn√©es termin√©e avec succ√®s !\n');
  } catch (error) {
    console.error('\n‚ùå Erreur lors de la g√©n√©ration des donn√©es:', error);
    process.exit(1);
  }
}

main()
  .then(() => process.exit(0))
  .catch((e) => {
    console.error('\n‚ùå Erreur fatale:', e);
    process.exit(1);
  });

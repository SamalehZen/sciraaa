import { db } from '@/lib/db';
import { users as credentials, user as appUser } from '@/lib/db/schema';
import { eq, sql } from 'drizzle-orm';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

interface UserCreationResult {
  username: string;
  password: string;
  role: 'admin' | 'user';
  status: 'created' | 'updated' | 'exists';
}

async function verifyDatabaseConnection(): Promise<boolean> {
  console.log('\nüîç V√©rification de la connexion √† la base de donn√©es...');
  try {
    await db.execute(sql`SELECT 1`);
    console.log('‚úÖ Connexion √† PostgreSQL r√©ussie');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur de connexion √† la base de donn√©es:', error);
    return false;
  }
}

async function verifyTables(): Promise<boolean> {
  console.log('\nüîç V√©rification des tables...');
  try {
    const tables = ['user', 'users', 'chat', 'message', 'event'];
    const results = await Promise.all(
      tables.map(async (table) => {
        try {
          await db.execute(sql.raw(`SELECT 1 FROM ${table} LIMIT 1`));
          console.log(`‚úÖ Table "${table}" existe`);
          return true;
        } catch {
          console.log(`‚ùå Table "${table}" manquante`);
          return false;
        }
      })
    );
    return results.every((r) => r);
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des tables:', error);
    return false;
  }
}

async function createUser(
  username: string,
  password: string,
  email: string,
  role: 'admin' | 'user'
): Promise<UserCreationResult> {
  const userId = `local:${username}`;
  const now = new Date();

  const mod = await import('bcryptjs');
  const bcrypt = (mod as any).default ?? (mod as any);
  const passwordHash = await bcrypt.hash(password, 10);

  // V√©rifier si le credential existe
  const cred = await db.query.users
    .findFirst({ where: eq(credentials.username, username) })
    .catch(() => null);

  if (!cred) {
    await db.insert(credentials).values({ username, passwordHash });
  }

  // V√©rifier si l'utilisateur existe
  const existingUser = await db.query.user.findFirst({ where: eq(appUser.id, userId) });

  if (!existingUser) {
    await db.insert(appUser).values({
      id: userId,
      name: username,
      email,
      emailVerified: false,
      image: null,
      createdAt: now,
      updatedAt: now,
      role,
      status: 'active',
    } as any);
    return { username, password, role, status: 'created' };
  } else {
    // Mettre √† jour si n√©cessaire
    await db
      .update(appUser)
      .set({ role: role as any, status: 'active' as any, updatedAt: now })
      .where(eq(appUser.id, userId));
    return { username, password, role, status: 'updated' };
  }
}

async function main() {
  console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('‚ïë     üöÄ Initialisation du Dashboard Admin Hyper      ‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');

  // 1. V√©rifications pr√©alables
  const dbConnected = await verifyDatabaseConnection();
  if (!dbConnected) {
    console.error('\n‚ùå Impossible de continuer sans connexion √† la base de donn√©es');
    process.exit(1);
  }

  const tablesExist = await verifyTables();
  if (!tablesExist) {
    console.log('\n‚ö†Ô∏è  Certaines tables sont manquantes. Ex√©cutez "pnpm db:push" d\'abord');
    process.exit(1);
  }

  console.log('\nüìù Cr√©ation des utilisateurs...\n');

  const results: UserCreationResult[] = [];

  // 2. Cr√©er l'admin principal (sam/sam)
  try {
    const sam = await createUser('sam', 'sam', 'sam@local', 'admin');
    results.push(sam);
    console.log(`‚úÖ Admin principal "${sam.username}" ${sam.status === 'created' ? 'cr√©√©' : 'mis √† jour'}`);
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'admin principal:', error);
  }

  // 3. Cr√©er l'admin personnalis√© (variables d'environnement)
  try {
    const customAdminUsername = process.env.ADMIN_USERNAME || 'admin';
    const customAdminPassword = process.env.ADMIN_PASSWORD || 'admin123';
    const customAdminEmail = process.env.ADMIN_EMAIL || 'admin@hyper.local';

    const customAdmin = await createUser(
      customAdminUsername,
      customAdminPassword,
      customAdminEmail,
      'admin'
    );
    results.push(customAdmin);
    console.log(
      `‚úÖ Admin personnalis√© "${customAdmin.username}" ${customAdmin.status === 'created' ? 'cr√©√©' : 'mis √† jour'}`
    );
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'admin personnalis√©:', error);
  }

  // 4. Cr√©er l'utilisateur de d√©monstration
  try {
    const demo = await createUser('demo', 'demo123', 'demo@hyper.local', 'user');
    results.push(demo);
    console.log(`‚úÖ Utilisateur demo "${demo.username}" ${demo.status === 'created' ? 'cr√©√©' : 'mis √† jour'}`);
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'utilisateur demo:', error);
  }

  // 5. Rapport final
  console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('‚ïë               üìä RAPPORT D\'INITIALISATION            ‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');

  console.log('\nüîê Credentials de connexion :\n');

  results.forEach((result) => {
    const icon = result.role === 'admin' ? 'üëë' : 'üë§';
    console.log(`${icon} ${result.role.toUpperCase()} - Username: ${result.username} / Password: ${result.password}`);
  });

  console.log('\nüìã Instructions :\n');
  console.log('1. D√©marrer l\'application : pnpm dev');
  console.log('2. Aller sur : http://localhost:3000/sign-in');
  console.log('3. Se connecter avec les credentials ci-dessus');
  console.log('4. Acc√©der au dashboard admin : http://localhost:3000/admin');

  console.log('\nüí° Prochaines √©tapes :\n');
  console.log('‚Ä¢ G√©n√©rer des donn√©es de test : pnpm seed:test-data');
  console.log('‚Ä¢ Comptes cr√©√©s : sam/sam, ' + (process.env.ADMIN_USERNAME || 'admin') + '/' + (process.env.ADMIN_PASSWORD || 'admin123') + ', demo/demo123');
  console.log('‚Ä¢ R√©initialiser tout : pnpm seed:reset');
  console.log('‚Ä¢ Lire la documentation : SETUP_ADMIN.md');

  console.log('\n‚ú® Initialisation termin√©e avec succ√®s !\n');
}

main()
  .then(() => process.exit(0))
  .catch((e) => {
    console.error('\n‚ùå Erreur fatale:', e);
    process.exit(1);
  });
